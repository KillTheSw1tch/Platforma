import json
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
<<<<<<< Updated upstream
<<<<<<< Updated upstream
from django.core.mail import send_mail
from django.conf import settings
from rest_framework import generics, viewsets, status
from .serializers import ExtendedUserSerializer, UserSerializer
from rest_framework.permissions import AllowAny, IsAuthenticated
from .models import Cargo, EmailVerification, Truck
from .serializers import CargoSerializer, UserSerializer, TruckSerializer, ProfileSerializer
=======
from rest_framework import generics, viewsets
from rest_framework.permissions import AllowAny, IsAuthenticated
=======
from rest_framework import generics, viewsets
from rest_framework.permissions import AllowAny, IsAuthenticated
>>>>>>> Stashed changes
from django.core.mail import send_mail
from django.conf import settings
import random

from .serializers import UserSerializer, CargoSerializer
from .models import Cargo, EmailVerification
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
from .forms import CargoForm
import random
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.decorators import permission_classes

<<<<<<< Updated upstream
<<<<<<< Updated upstream

import logging

logger = logging.getLogger(__name__)
        
=======
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞
>>>>>>> Stashed changes
=======
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞
>>>>>>> Stashed changes
class CreateUserView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = ExtendedUserSerializer
    permission_classes = [AllowAny]

    def perform_create(self, serializer):
<<<<<<< Updated upstream
<<<<<<< Updated upstream
            try:
                user = serializer.save()
                code = str(random.randint(100000, 999999))
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
                print("[DEBUG] Received request:")
                print(json.dumps(self.request.data, indent=4, ensure_ascii=False))  # –í–∏–≤–µ–¥–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –≤ –≥–∞—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
                
                EmailVerification.objects.create(user=user, code=code)
                self.send_verification_email(user, code)
            except Exception as e:
                print(f"[ERROR] Error creating a user: {e}")

    def send_verification_email(self, user, code):
        subject = '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'.encode('utf-8')
        message = f'–ü—Ä–∏–≤—ñ—Ç, {user.username}! –í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {code}'.encode('utf-8')
        from_email = settings.DEFAULT_FROM_EMAIL
        recipient_list = [user.email]

        try:
            send_mail(
                subject.decode('utf-8'),  # –î–µ–∫–æ–¥—É—î–º–æ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                message.decode('utf-8'),  # –î–µ–∫–æ–¥—É—î–º–æ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                from_email,
                recipient_list,
                fail_silently=False,
            )
            print("[DEBUG] Email was sent successfully.")
        except Exception as e:
            print(f"[ERROR] Error sending an email: {e}")
        
class CargoViewSet(viewsets.ModelViewSet):
    queryset = Cargo.objects.all()
    serializer_class = CargoSerializer
    # permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save()
    
=======
=======
>>>>>>> Stashed changes
        user = serializer.save(is_active=False)  # —Å–æ–∑–¥–∞—ë–º, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        code = str(random.randint(100000, 999999))  # 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
        EmailVerification.objects.create(user=user, code=code)

        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ {code} –Ω–∞ {user.email} —Å –ø–æ—á—Ç—ã {settings.DEFAULT_FROM_EMAIL}")
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        send_mail(
            subject='–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            message=f'–ü—Ä–∏–≤–µ—Ç, {user.username}! –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}',
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            fail_silently=False,
        )

        print(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}: {code}")

# CRUD –¥–ª—è –≥—Ä—É–∑–æ–≤
class CargoViewSet(viewsets.ModelViewSet):
    queryset = Cargo.objects.all()
    serializer_class = CargoSerializer
    permission_classes = [IsAuthenticated]

# –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ (HTML)
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
def add_cargo_view(request):
    if request.method == 'POST':
        form = CargoForm(request.POST)
        if form.is_valid():
            form.save()  # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —É –ë–î
            return redirect('cargo-success')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É
    else:
        form = CargoForm()
<<<<<<< Updated upstream
<<<<<<< Updated upstream
    
    return render(request, 'api/add_cargo.html', {'form': form})

class UserProfileAPIView(generics.RetrieveUpdateAPIView):
    serializer_class = ExtendedUserSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        return self.request.user

    def update(self, request, *args, **kwargs):
        user = self.get_object()
        profile_data = request.data.pop('profile', {})

        serializer = self.get_serializer(user, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –æ–∫—Ä–µ–º–æ
        profile_serializer = ProfileSerializer(user.profile, data=profile_data, partial=True)
        profile_serializer.is_valid(raise_exception=True)
        profile_serializer.save()

        return Response(serializer.data, status=status.HTTP_200_OK)
    
    
=======
=======
>>>>>>> Stashed changes

    return render(request, 'api/add_cargo.html', {'form': form})


from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status

<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
class VerifyEmailCodeView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        email = request.data.get('email')
        code = request.data.get('code')

        if not email or not code:
            return Response({'error': 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}, status=400)

        try:
            user = User.objects.get(email=email)
            verification = EmailVerification.objects.get(user=user)

            if verification.code == code:
                user.is_active = True
                user.save()
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                verification.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
                refresh = RefreshToken.for_user(user)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ
                return Response({
                    'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!',
                    'token': str(refresh.access_token),  # –¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç
                }, status=200)

=======
                verification.delete()  # —É–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                return Response({'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'}, status=200)
>>>>>>> Stashed changes
=======
                verification.delete()  # —É–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                return Response({'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'}, status=200)
>>>>>>> Stashed changes
            else:
                return Response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}, status=400)

        except User.DoesNotExist:
            return Response({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        except EmailVerification.DoesNotExist:
            return Response({'error': '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
<<<<<<< Updated upstream
<<<<<<< Updated upstream


class TruckViewSet(viewsets.ModelViewSet):
    queryset = Truck.objects.all()
    serializer_class = TruckSerializer

class TruckListCreateView(generics.ListCreateAPIView):
    queryset = Truck.objects.all()
    serializer_class = TruckSerializer 

from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['POST'])
def validate_company_code(request):
    country = request.data.get('country')
    code = request.data.get('code')

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:", country, code)

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    if country == "switzerland" and code.startswith("CHE-") and len(code) > 10:
        return Response({"valid": True})
    elif country == "ukraine" and code.isdigit() and len(code) == 8:
        return Response({"valid": True})
    else:
        return Response({"valid": False})

from rest_framework.parsers import MultiPartParser, FormParser
from .models import CompanyDocument
from .serializers import CompanyDocumentSerializer

class CompanyDocumentUploadView(APIView):
    permission_classes = [IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        files = request.FILES.getlist('files')
        documents = []

        for file in files:
            doc = CompanyDocument.objects.create(user=request.user, file=file)
            documents.append(doc)

        serializer = CompanyDocumentSerializer(documents, many=True)
        return Response(serializer.data, status=201)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_documents_approval(request):
    user = request.user
    documents = CompanyDocument.objects.filter(user=user)

    if not documents.exists():
        return Response({"approved": False, "rejected": False, "message": "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}, status=404)

    if any(doc.is_rejected for doc in documents):
        return Response({"approved": False, "rejected": True, "message": "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"}, status=200)

    all_approved = all(doc.is_approved for doc in documents)
    return Response({"approved": all_approved, "rejected": False}, status=200)

=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
